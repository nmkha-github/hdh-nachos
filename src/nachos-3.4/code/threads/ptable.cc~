#include "synch.h"
#include "ptable.h"
#include "system.h"
#include "openfile.h"

PTable::PTable(int size){
   if(size<0||size>10){
   	printf("\nKich thuoc khong hop le!\n");
	return;	
   }
   psize=size;
   for(int i=0;i<size;i++){
      pcb[i]=NULL;
   } 
   bm=new BitMap(size);
   bm->Mark(0);
   bmsem=new Semaphore("bmsem",1);
   pcb[0]=new PCB(0);
   pcb[0]->parentID=-1;
}           
PTable::~PTable(){                 // hủy các đối tượng đã tạo
   for(int i=0;i<psize;i++){
   	if(pcb[i]!=NULL){
           delete pcb[i];
        }
   }
   delete bmsem;
}
		
int PTable::ExecUpdate(char* name){      // Xử lý cho system call SC_Exit
   //Gọi mutex->P(); để giúp tránh tình trạng nạp 2 tiến trình cùng 1 lúc. 
   bmsem->P();
   //Kiểm tra tính hợp lệ của chương trình “name”
   //Kiểm tra sự tồn tại của chương trình “name” bằng cách gọi phương thức Open của lớp fileSystem. 
   if(name==NULL){
      printf("\nKhong the thuc thi voi gia tri NULL\n");
      bmsem->V();
      return -1;
   }
    OpenFile *executable = fileSystem->Open(name);
    if(executable==NULL){
       printf("\nChuong trinh khong ton tai!\n");
       bmsem->V();
       return -1;
    }
   //So sánh tên chương trình và tên của currentThread để chắc chắn rằng chương trình này không gọi thực thi chính nó. 
    if(strcmp(name,currentThread->getName())=0){
       printf("\nKhong the thuc thi chinh no\n");
       bmsem->V();
       return -1;
    }
    //Tìm slot trống trong bảng Ptable. 
    int index=GetFreeSlot();
    if(index<0){
    	printf("\nKhong con slot trong\n");
        bmsem->V();
        return -1; 
    }
    //Nếu có slot trống thì khởi tạo một PCB mới với processID chính là index của slot này, parrentID là processID của currentThread
    pcb[index]=new PCB(index);
    pcb[index]->SetFileName(name);
    pcb[index]->parentID = currentThread->processID;
    // Gọi thực thi phương thức Exec của lớp PCB.
    int id = pcb[index]->Exec(name, index);
    //Gọi bmsem->V().
    bmsem->V();
    //Trả về kết quả thực thi của PCB->Exec. 
    return id;
}
int PTable::ExitUpdate(int extcode){        // Xử lý cho system call SC_Exit
   //Nếu tiến trình gọi là main process thì gọi Halt().
   int pid=currentThread->processID;
   if(pid==0){
      currentThread->FreeSpace();
      interrupt->Halt();  
      return 0;
   }
   if(IsExist(pid)==false){
	printf("\nProcess %d khong ton tai\n",pid);
        return -1;
    }
    //Ngược lại gọi SetExitCode để đặt exitcode cho tiến trình gọi.
    pcb[pid]->SetExitCode(extcode);
    pcb[pcb[pid]->parentID]->DecNumWait();
    //Gọi JoinRelease để giải phóng tiến trình cha đang đợi nó(nếu có) và ExitWait() để xin tiến trình cha cho phép thoát.
    pcb[pid]->JoinRelease();
    pcb[pid]->ExitWait();
    Remove(pid);
    return extcode; 
}
int PTable::JoinUpdate(int pid){        // Xử lý cho system call SC_Join
  //Ta kiểm tra tính hợp lệ của processID id và kiểm tra tiến trình gọi Join có phải là cha của tiến trình có processID là id hay không. Nếu không thỏa, ta báo lỗi hợp lý và trả về -1. 
  if(pid<0||pid>=psize||pcb[pid]==NULL||pcb[pid]->parentID != currentThread->processID){
     printf("\nKhong the goi join\n");
     return -1;
  }
  //Tăng numwait và gọi JoinWait() để chờ tiến trình con thực hiện.
  pcb[pcb[pid]->parentID]->IncNumWait();
   pcb[pid]->JoinWait();
  //Sau khi tiến trình con thực hiện xong, tiến trình đã được giải phóng
  //Xử lý exitcode.
   int extcode=pcb[pid]->GetExitCode();
   
 //ExitRelease() để cho phép tiến trình con thoát. 
     pcb[pid]->ExitRelease();
    return extcode;
}

int PTable::GetFreeSlot(){          // tìm free slot để lưu thông tin cho tiến trình mới
   for(int i=0;i<psize;i++){
   	if(pcb[i]==NULL){
            return i;
         }
   }
    return -1;
}
bool PTable::IsExist(int pid){      // kiểm tra tồn tại processID này không?
    return pcb[pid]!=NULL;
}
    
void PTable::Remove(int pid){       // khi tiến trình kết thúc, delete processID ra khỏi mảng quản lý nó
    if(pcb[pid]!=NULL){
    	delete pcb[pid];
        pcb[pid]=NULL;
    }
}

char* PTable::GetFileName(int id){  // Trả về tên của tiến trình
    return pcb[id]->GetFileName();
}
